.TH SYSTEMD.CRON 7 "" "systemd-cron @version@" systemd.cron

.SH NAME
systemd.cron - systemd cron units

.SH SYNOPSIS
.de headline
.br
.if \\n[timer_\\$1] cron-\\$1.timer, cron-\\$1.target, cron-\\$1.service
..
cron.target
.headline boot
.headline minutely
.headline hourly
.headline daily
.headline weekly
.headline monthly
.headline quarterly
.headline semi-annually
.headline yearly
.br
cron-update.path, cron-update.service
.br
cron-failure@.service.

.SH DESCRIPTION
These units provide cron daemon functionality by running scripts in cron directories.
.br
The crontabs are monitored by cron-update.path and are automatically translated by
.BR systemd-crontab-generator (8).

.SH FILES
.de etccron
.if \\n[etccron_\\$1] \{ .
.TP
.I /etc/cron.\\$1
Directory for scripts to be executed \\$2.

. \}
..
.etccron boot "on boot"
.etccron minutely "every minute"
.etccron hourly "every hour"
.etccron daily "every day"
.etccron weekly "every week"
.etccron monthly "every month"
.etccron quarterly "every 3 months"
.etccron semi-annually "every 6 months"
.etccron yearly "every year"
.TP
.I /etc/cron.d
Directory for \fBcrontabs\fR to be executed on a custom schedule.
The files in this folder must follow the \fBcrontab\fR(5) layout.

.TP
.I /usr/lib/systemd/system/<schedule>.timer
.TP
.I /etc/systemd/system/<schedule>.timer
.br
These native systemd timers will overide the legacy cron jobs.
.br
You can also use this mechanism to mask an unneeded crontab provide by a package:
.br
ln \-s /dev/null /etc/systemd/system/[package].timer

.TP
.I @statedir@
User's crontabs, to be modifier using the \fBcrontab\fR(1) utility.

.SH SYSTEM UNITS
.TP
cron.target
The target unit which starts the others. This should be enabled and started to use cron functionality.

.TP
cron-update.path
This monitor alteration of the
.B FILES
listed hereupper and will call cron-update.service

.TP
cron-update.service
This trigger a 'systemctl daemon-reload', the only way to ask systemd to rerun the generator.

.if '@enable_runparts@'yes' \{ .
.TP
cron-\fIschedule\fR.timer
The timer units which pull the cron-\fIschedule\fR.target units at the appropriate time. Started and stopped by the
cron.target unit.

.TP
cron-\fIschedule\fR.target
The targets invoke all service units wanted by them, including cron-\fIschedule\fR.service.

.TP
cron-\fIschedule\fR.service
The service units which run scripts in the cron directories. Started and stopped by the cron-\fIschedule\fR.target
units. You can use \fBjournalctl\fR(1) to view the output of scripts run
from these units.
. \}

.TP
cron-failure@.service
This service will send an email in case of failure.

.SH LIMITATIONS
This cron replacement only send mails on failure. The log of jobs is saved in systemd journal.
Do \fInot\fR use with a cron daemon or anacron, otherwise scripts may be
executed multiple times.
.br
All services are run with
.BR Type=oneshot ,
which means you can't use systemd-cron to launch long lived forking daemons.

.SH EXTENSIONS
The generator can optionally turn all crontabs in persistent timers with the
.B PERSISTENT=true
flag, while a regular cron+anacron setup won't catch-up the missed executions of crontabs on boot.

.SH EXAMPLES

.IP "Start cron units"
.SB # systemctl start cron.target

.IP "Start cron units on boot"
.SB # systemctl enable cron.target

.IP "View script output"
.SB # journalctl -u cron-<schedule>

.IP "Override some generated timer start time"
.SB # systemctl edit cron-geoip-database-contrib-root-<...>.timer --full
.br
.I keep existing statements, but change this one:
.br
.SB [Timer]
.br
.SB OnCalendar=*-*-* 18:36:00

.IP "Override cron-daily.service priority, useful for old computers"
.br
.SB # systemctl edit cron-daily.service
.br
.I this will open a blank editor when you can type a drop-in configuration file
.I that will extend the current .service
.br
.SB [Service]
.br
.SB CPUSchedulingPolicy=idle
.br
.SB IOSchedulingClass=idle
.br

.IP "Example service file executed every hour"
.SB [Unit]
.br
.SB Description=Update the man db

.SB [Service]
.br
.SB Nice=19
.br
.SB IOSchedulingClass=2
.br
.SB IOSchedulingPriority=7
.br
.SB ExecStart=/usr/bin/mandb --quiet

.SB [Install]
.br
.SB WantedBy=cron-hourly.target

.SH NOTES
.nr step 1 1
.IP \n[step]. 3
The exact times scripts are executed is determined by the values of the special calendar events \fIhourly\fR,
\fIdaily\fR, \fIweekly\fR, \fImonthly\fR, and \fIyearly\fR defined by \fBsystemd.time\fR(7).
.if '@enable_runparts@'yes' \{ .
.IP \n+[step].
\fBrun-parts\fR(8) is used to run scripts. Scripts must be executable by \fIroot\fR to run.
. \}

.SH DIAGNOSTICS
You can execute "systemctl list-timers" to have a overview of
timers and know when they will elapse.

.SH SEE ALSO
.BR systemd (1),
.BR systemd.unit (5),
.BR systemd.service (5),
.BR systemd.timer (5),
.BR systemd.time (7),
.BR systemd-crontab-generator (8),
.BR run-parts (8),
.BR crontab (1),
.BR crontab (5)

.SH AUTHOR
Dwayne Bent
